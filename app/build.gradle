apply plugin: 'com.android.application'


apply plugin: 'com.gamehelper.method_call_record_plugin'
methodCallRecordExtension {
    /**
     * 日志打印测试，不知道方法描述怎么写可以在这里填写下方法名，build一下即可看到日志（模糊匹配）
     * 额外说明：特殊处理：loadLibrary 会额外打印一些所在方法体的调用常量，便于定位加载的什么so
     */
//    methodTest = ["loadLibrary"]

    /**
     * 方法体插桩（对于一些接口实现，比如常见的点击事件，其调用处是系统api，这导致我们同样无法插桩，这时候就需要我们在方法体，也就是接口实现处进行插桩监控，所用asm api :onMethodEnter）
     * key：所调用方法的归属类,或者是归属类所实现的接口（比如常见的接口，其实方法归属类都是内部类，名字就比较多了，但是都会实现统一的接口，这种场景我们就填入接口），可填写空值表示仅匹配方法名和方法描述符。
     * value:所调用方法的方法名+描述符（描述符指的是方法的入参和返回值描述，不会写的话可以使用上方的methodTest 打印出来）
     */
    hookMethodEnterMap = ["android/view/View\$OnClickListener"                                                                 : ["onClick(Landroid/view/View;)V"],
                          "android/content/DialogInterface\$OnClickListener"                                                   : ["onClick(Landroid/content/DialogInterface;I)V"],
                          "android/content/DialogInterface\$OnMultiChoiceClickListener"                                        : ["onClick(Landroid/content/DialogInterface;IZ)V"],
                          "android/widget/CompoundButton\$OnCheckedChangeListener"                                             : ["onCheckedChanged(Landroid/widget/CompoundButton;Z)V"],
                          "android/widget/RadioGroup\$OnCheckedChangeListener"                                                 : ["onCheckedChanged(Landroid/widget/RadioGroup;I)V"],
                          "android/widget/RatingBar\$OnRatingBarChangeListener"                                                : ["onRatingChanged(Landroid/widget/RatingBar;FZ)V"],
                          "android/widget/SeekBar\$OnSeekBarChangeListener"                                                    : ["onStopTrackingTouch(Landroid/widget/SeekBar;)V"],
                          "android/widget/AdapterView\$OnItemSelectedListener"                                                 : ["onItemSelected(Landroid/widget/AdapterView;Landroid/view/View;IJ)V"],
                          "android/widget/TabHost\$OnTabChangeListener"                                                        : ["onTabChanged(Ljava/lang/String;)V"],
                          "android/widget/AdapterView\$OnItemClickListener"                                                    : ["onItemClick(Landroid/widget/AdapterView;Landroid/view/View;IJ)V"],
                          "android/widget/ExpandableListView\$OnGroupClickListener"                                            : ["onGroupClick(Landroid/widget/ExpandableListView;Landroid/view/View;IJ)Z"],
                          "android/widget/ExpandableListView\$OnChildClickListener"                                            : ["onChildClick(Landroid/widget/ExpandableListView;Landroid/view/View;IIJ)Z"],
                          "android/widget/Toolbar\$OnMenuItemClickListener"                                                    : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "android/support/v7/widget/Toolbar\$OnMenuItemClickListener"                                         : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "androidx/appcompat/widget/Toolbar\$OnMenuItemClickListener"                                         : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "android/widget/PopupMenu\$OnMenuItemClickListener"                                                  : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "androidx/appcompat/widget/PopupMenu\$OnMenuItemClickListener"                                       : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "android/support/v7/widget/PopupMenu\$OnMenuItemClickListener"                                       : ["onMenuItemClick(Landroid/view/MenuItem;)Z"],
                          "com/google/android/material/navigation/NavigationView\$OnNavigationItemSelectedListener"            : ["onNavigationItemSelected(Landroid/view/MenuItem;)Z"],
                          "android/support/design/widget/NavigationView\$OnNavigationItemSelectedListener"                     : ["onNavigationItemSelected(Landroid/view/MenuItem;)Z"],
                          "android/support/design/widget/BottomNavigationView\$OnNavigationItemSelectedListene"                : ["onNavigationItemSelected(Landroid/view/MenuItem;)Z"],
                          "com/google/android/material/bottomnavigation/BottomNavigationView\$OnNavigationItemSelectedListener": ["onNavigationItemSelected(Landroid/view/MenuItem;)Z"],
                          "android/support/design/widget/TabLayout\$OnTabSelectedListener"                                     : ["onTabSelected(Landroid/support/design/widget/TabLayout\$Tab;)V"],
                          "com/google/android/material/tabs/TabLayout\$OnTabSelectedListener"                                  : ["onTabSelected(Lcom/google/android/material/tabs/TabLayout\$Tab;)V"],
    ]
    /**
     * 方法调用插桩：精准匹配（用于监控方法调用情况，因为很多api是系统api，我们无法插桩到系统api的方法体里面，所以这里筛查的是方法调用指令，所用 asm api visitMethodInsn）
     * key：所调用方法的归属类
     * value:所调用方法的方法名+描述符（描述符指的是方法的入参和返回值描述）
     *
     * 下面配置的是一些常见敏感api，用于监控敏感api的调用情况。
     */
    hookMethodInvokeMap = [
            "android/telephony/TelephonyManager": ["getLine1Number()Ljava/lang/String;",
                                                   "getDeviceId()Ljava/lang/String;",
                                                   "getSimSerialNumber()Ljava/lang/String;",
                                                   "getSubscriberId()Ljava/lang/String;"],
            "android/net/wifi/WifiInfo"         : ["getMacAddress()Ljava/lang/String;",
                                                   "getSSID()Ljava/lang/String;"],
            "java/net/NetworkInterface"         : ["getInetAddresses()Ljava/util/Enumeration;"],
            "java/net/InetAddress"              : ["getHostAddress()Ljava/lang/String;"],
            "android/provider/Settings\$System" : ["getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"],
            "android/provider/Settings\$Secure" : ["getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"]
    ]

    /**
     * 配置忽略插桩的模块 可以配置全路径，或者父级路径（内部判断是依据这个开头的类，则忽略）
     */
//    ignorePath = ["com/canzhang/asmdemo/sdk/MySdk"]
    /**
     * 替换方法调用
     * key : 需要替换的 方法归属类+"."+方法名+方法描述   如：android/telephony/TelephonyManager.getLine1Number()Ljava/lang/String;
     * list item value : 替换成  index0=类名，如：com/canzhang/ImplTelephonyManager；  index1=方法名，如：getLine1Number；  index2=方法描述符，如：  ()Ljava/lang/String; ； 严格按照顺序填入
     */
    replaceMethodInvokeMap = [
            "android/telephony/TelephonyManager.getLine1Number()Ljava/lang/String;"                                             : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getPhoneNumberImpl",
                                                                                                                                   "(Landroid/telephony/TelephonyManager;)Ljava/lang/String;"],
            "android/telephony/TelephonyManager.getDeviceId()Ljava/lang/String;"                                                : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getDeviceIdImpl",
                                                                                                                                   "(Landroid/telephony/TelephonyManager;)Ljava/lang/String;"],
            "android/telephony/TelephonyManager.getSimSerialNumber()Ljava/lang/String;"                                         : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getSimSerialNumberImpl",
                                                                                                                                   "(Landroid/telephony/TelephonyManager;)Ljava/lang/String;"],
            "android/telephony/TelephonyManager.getSubscriberId()Ljava/lang/String;"                                            : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getSubscriberIdImpl",
                                                                                                                                   "(Landroid/telephony/TelephonyManager;)Ljava/lang/String;"],
            "android/net/wifi/WifiInfo.getMacAddress()Ljava/lang/String;"                                                       : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getMacAddressImpl",
                                                                                                                                   "(Landroid/net/wifi/WifiInfo;)Ljava/lang/String;"],
            "android/net/wifi/WifiInfo.getSSID()Ljava/lang/String;"                                                             : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getSSIDImpl",
                                                                                                                                   "(Landroid/net/wifi/WifiInfo;)Ljava/lang/String;"],
            "java/net/NetworkInterface.getInetAddresses()Ljava/util/Enumeration;"                                               : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getInetAddressesImpl",
                                                                                                                                   "(Ljava/net/NetworkInterface;)Ljava/util/Enumeration;"],
            "java/net/InetAddress.getHostAddress()Ljava/lang/String;"                                                           : ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getHostAddressImpl",
                                                                                                                                   "(Ljava/net/InetAddress;)Ljava/lang/String;"],
            "android/provider/Settings\$System.getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;": ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getStringImpl",
                                                                                                                                   "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"],
            "android/provider/Settings\$Secure.getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;": ["com/canzhang/asmdemo/sdk/MySdk",
                                                                                                                                   "getStringImpl",
                                                                                                                                   "(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;"],
    ]



}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "asm.canzhang.com.asmdemo"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation project(":method_call_record_lib")
}
